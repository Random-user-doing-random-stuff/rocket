#![allow(unused_imports)]
use diesel::prelude::*;
use diesel::pg::PgValue;
use diesel::{AsExpression, FromSqlRow};
use diesel::serialize::{self, IsNull, Output, ToSql};
use diesel::deserialize::{self, FromSql};
use serde::{Serialize, Deserialize};
use crate::schema::*;
use diesel::pg::Pg;
use std::io::Write;
use diesel::sql_types::Text;

#[derive(Debug, Serialize, Deserialize, Clone, Copy, PartialEq, Eq, AsExpression, FromSqlRow)]
#[diesel(sql_type = Text)]
pub enum UserRole {
    Admin,
    Professor,
    User,
}

impl FromSql<Text, diesel::pg::Pg> for UserRole {
    fn from_sql(bytes: <diesel::pg::Pg as diesel::backend::Backend>::RawValue<'_>) -> deserialize::Result<Self> {
        match std::str::from_utf8(bytes.as_bytes())? {
            "Admin" => Ok(UserRole::Admin),
            "Professor" => Ok(UserRole::Professor),
            "User" => Ok(UserRole::User),
            _ => Err("Unrecognized enum variant".into()),
            
        }
    }
    
}

impl ToSql<Text, diesel::pg::Pg> for UserRole {
    fn to_sql<'a>(&'a self, out: &mut diesel::serialize::Output<'a, '_, ::diesel::pg::Pg>) -> serialize::Result {
        match self {
            UserRole::Admin => out.write_all(b"Admin")?,
            UserRole::Professor => out.write_all(b"Professor")?,
            UserRole::User => out.write_all(b"User")?,
        }
        Ok(IsNull::No)
    }
}


#[derive(Debug, Queryable, Serialize, Deserialize, Selectable)]
#[diesel(table_name = users)]
pub struct User {
    pub id: i32,
    pub first_name: String,
    pub last_name:  Option<String>, 
    pub email:  String,
    pub password:   String,
    pub phone_number:   Option<String>,
    pub role:   UserRole,
    pub created_at:  Option<chrono::NaiveDateTime>,
    pub last_updated:  Option<chrono::NaiveDateTime>,
    pub last_login:  Option<chrono::NaiveDateTime>,
    pub password_reset_token:  Option<String>,
    pub password_reset_token_expiry:  Option<chrono::NaiveDateTime>,
    pub is_active:  bool,
}

// NewUser struct that is Insertable
#[derive(Insertable, Serialize, Deserialize, Debug)]
#[diesel(table_name = users)]
pub struct NewUser<'a> {
    pub first_name: &'a str,
    pub last_name: Option<&'a str>,
    pub email: &'a str,
    pub password: &'a str,
    pub phone_number: Option<&'a str>,
    pub role: UserRole,
}

impl<'a> NewUser<'a> {
    pub fn new(
        first_name: &'a str,
        last_name: Option<&'a str>,
        email: &'a str,
        password: &'a str,
        phone_number: Option<&'a str>,
        role: UserRole,
    ) -> Self {
        NewUser {
            first_name,
            last_name,
            email,
            password,
            phone_number,
            role,
        }
    }
}
